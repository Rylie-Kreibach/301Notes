        Homework 1 due tonight
            last problem (Deer/Fox/Bunny) suggestions

            What are the possible cases?


        I'll post Homework 2 after class (due Tues Sep 9)

        /////////////////////

        Today:

        - review implies operator
        - evaluating logical statements
        - compound truth tables
        - using Logika
        - parse trees
        - begin propositional logic

        //////////////////////////////////////////


        Review: IMPLIES operator →

        "If it is snowing, then I will bring a coat"

        p: It is snowing
        q: I will bring a coat

        p → q

        When is this true? When is this false? When it breaks the promise


        p q  #  p → q
        --------------
        T T  #    T
        T F  #    F
        F T  #    T
        F F  #    T

        //////////////////////////////////////

        Evaluating logical statements.

        Basic operations:

        ∧ - and
        ∨ - or
        ¬ - not
        → - implies

        ////////////////////////////////////////

        Consider ¬p ∨ q ∧ r.

        --> what operation do we do first?



        Order of logical operations

 () parenthesis
! not
& and
| or 
-> implies

        For logic statements (∧ ∨ ¬ →)?





        Given this statement:

            ¬p ∨ q ∧ r
((!P) || (q && r))



        Add () to show the order of operations.


        Evaluate the above statement using these
        variable assignments:

        p is T
        q is F
        r is F

((!T) || (F && F))
(F || F)
    F

        ////////////////////////////////////////////////

        Order of operations
            ¬ evaluates right to left
                ¬¬p is equivalent to....
p

            ∧ and ∨ evaluate left to right
                p ∧ q ∧ r is equivalent to.... 
            (p && q) && r
                p ∨ q ∨ r is equivalent to....
            (p || q) || r

            → evaluates right to left
                p → q → r is equivalent to....

p -> (q -> r)



        //////////////////////////////////////////

        Top-level operator (what happens LAST?)


        ¬p ∨ q ∧ r


        top-level? 
Or

        How is this similar to a circuit? 



        ///////////////////////////////

        p ∧ q ∨ r ∧ p

        rewrite with ():
(p && q) || (r && p)

        top-level operator? 
or


        //////////////////////////////

        p ∧ q ∧ r ∧ s

        rewrite with ():
((p ∧ q) ∧ r) ∧ s

        top-level operator? AND 
rightmost && (Near s)

        ////////////////////////////////////////////////////

        Listing all truth assignments for a logical statement.



        If we have 2 variables, how many possible truth assignments?

            p, q

4



        If we have 3 variables, how many possible truth assignments?

            p, q, r
8


        If we have n variables, how many possible truth assignments?

2^n




        ////////////////////////////////////////////////////

        Classifying logical statements based on truth assignments.



        Contingent, contradictory, tautology



        contingent: Mix of true and false

            Example? p || q



        contradictory: Always False

            Example? ! p && p


        tautology: Always true

            Example? 
        ! P || p
            

        ///////////////////////////////////////////


        Compound truth tables.


        Write a truth table for:

        (p ∧ r) → (r ∨ ¬q)

                         *
        -----------------------------
        p q r #  (p ∧ r) → (r ∨ ¬q)
        -----------------------------
        T T T #     T    T    T  F
        T T F #     F    T    F  F
        T F T #     T    T    T  T
        T F F #     F    T    T  T 
        F T T #     F    T    T  F  
        F T F #     F    T    F  F  
        F F T #     F    T    T  T 
        F F F #     F    T    T  T
        -----------------------------
Tautology
    T: [TTT] [TTF] [TFT] [TFF] [FTT] [FTF] [FFT] [FFF]



        --> top-level operator?
implies
        --> need to evaluate statement on ALL possible truth assignments
yes
        --> how many truth assignments are there?
8
        --> how would we classify this truth table?
tautology

        /////////////////////////////////////////

        complete truth table in truth.logika

        --> what to type for different operators


        AND: &
        OR: |
        NOT: !
        IMPLIES: ->:

        alignment matters!

        --> order of operations in Logika

        //////////////////////////////////////
        

        trees



        parse trees

        --> what are they?
    shows the levels of logical priority and the variable correlation

        --> draw one for (p ∧ q) → ¬r




        --> expression trees



        --> draw one for p ∨ q ∧ r → ¬p → ¬q ∨ s



        --> how do they relate to programming?

        --> what is the "top-level operator" here?


        ////////////////////////////////////////

        Propositional logic.


        - a set of propositional atoms (statements that can be T/F)
            --> these will be our boolean variables in logic statements



        - connected by logical operators



        - join together to make new propositions (logical sentences)
            that can be true or false



        ////////////////////////////////////////

        Which ones are propositions?
evaluate to true or false

        Propositional atom: a simple proposition without operators

        Today is Thursday.
positional

        What time is it?
    Not

        x == 2
propositional

        Pigs can fly.
Positional

        Drive carefully.
    Not

        y <= 4
propositional


        ////////////////////////////////////////

        Suppose we have these propositional atoms:

            p: It is below freezing.

            q: It is snowing.

            r: y <= 4

            s: x == 2


        How would we express these as English sentences?

            ¬p:
It's not below freezing

            p ∧ q:
It's below freezing and it's snowing

            p → q :
If it's below freezing, then it snows

            ¬p → ¬q:
If it's not below, the it doesn't snow

            r ∨ s:
If (y <= 4 || x == 2)

            ¬r:
y > 4

        ////////////////////////

        Next time:

        - A bit more with translations
        - Equivalent propositions
        - DeMorgan's laws
        - Equivalent if-statements
        - Negating if-statements
        - Proving equivalence with truth tables
        - Satisfiability