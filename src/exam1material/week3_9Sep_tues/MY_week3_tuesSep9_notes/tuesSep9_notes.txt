Repo access issues

Sireum fonts

HW 2 due today

HW 3 will be posted after class, due next Tues

////////////////////////////

Today:
- More with equivalence
- More with satisfiability
- Proving arguments
- Start on natural deduction

////////////////////////////////
∧ ∨ ¬ →
///////////////////////////////

Associativity.

Meaning? parenthesis change doesn't matter
(p && q) || r equivalent to p && (q || r)

Which operators are associative? Which are not?
Associative: AND, OR
Not: IMPLIES


How to prove each case?


////////////////////////////////

Commutativity.

Meaning? order doesn't matter

Which operators are commutative? Which are not?

How to prove each case?

Communative: AND, OR
not: IMPLIES


////////////////////////////////
∧ ∨ ¬ →
////////////////////////////////

Satisfiability.

--> definition? At least one truth assignment outputs true

--> how to prove something is satisfiable?
Find just one truth assignment which is true


--> how to prove something is not satisfiable?
Full truth table check to see that it's contradictory


////////////////////////////

SAT

straightforward approach to checking all possibilities:
generate all truth assignments and try them all.
n vaariables, 2^n truth assignments.
    (exponential time algorithms)



- Aside: P and NP problems
P: solved in polynomial 
NP: checked in polynomial

running time programs

can we solve a problem in polynomial time?
2^n

can we check a solution to a problem in polynomial time?
not exponential time, it would be polynomial time


////////////////////////

Proving an argument.

*Premises* - pieces of information we are given (assume true)

*Conclusion* - something we are trying to show logically 
    follows from our premises.



An argument is of the form:

    IF all the premises really are true, 
    THEN the conclusion is true



--> When is an argument considered invalid?
    implies statement, only false when [T F] 
    When all premises are true and the conclusion is false.

--> When is an argument considered invalid?
    Anytime the premises are true and the conclusion is true.



ONE INVALID ASSIGNMENT MAKES THE ENTIRE THING INVALID EVEN IF THERE'S A 
VALID ASSIGNMENT

///////////////////////////////////////

Proofs with truth tables.

Suppose we know:

    - I am in the CS dept or I am in the ECE dept
    - I am not in the ECE dept
    - I can log in to the CS lab computers if
        I am in the CS dept

I want to prove:

    - I can log in to the CS lab computers
        and I am in the CS dept

--> How would we translate to propositional logic?


Propositional atoms:
 p: CIS 
 q: ECE
 r: log in


Translations:
    - p || q
    - !q
    - p -> r
        Conclusion: r && p

--> How to prove with a truth table?
Find truth assignments where all all 3 premises are and conclusion is also true.



////////////////////////////////
∧ ∨ ¬ →
////////////////////////////////

Format for a truth table proof:

             (mark * for each premise/conclusion)
--------------------------------------------------------------
variables # (premise1, premise2, ..., premiseN) ⊢ conclusion
---------------------------------------------------------------
... fill in like a truth table for each premise and conclusion
---------------------------------------------------------------

Valid [T assigns where all premises T - conclusion should also be T]



////////////////////////////

Example: truthTableProof1.logika

/////////////////////////////

Another example (truthTableProof2.logika)

Premises:
    p → ¬q
    p → q
    p ∨ q

We wish to prove:

    q





/////////////////////////////

When is an argument invalid?
When all premises are true, but the conclusion is false.
Therefore, the promise was broken



Example:

Premises:
    If it is sunny, then I wear sunscreen.
    I wear sunscreen.

Proposed conclusion:
    It is sunny.

1) Translate to propositional logic

premise: p -> q, q
conclusion: p



2) How can we show it is invalid?
Invalid: P = F, q = F



////////////////////////////////

∧ ∨ ¬ →

////////////////////////////////

Showing arguments are invalid in Logika

(invalidProof.logika)



////////////////////////////

Does it matter if the conclusion is true when 
    the premises aren't?
No

Does it matter if one premise is true when the other isn't?
No, only care when all premises are true

Does it matter if the conclusion is false when some 
    (but not all) of the premises are true?
No

////////////////////////////

Downside of proofs with truth tables?






////////////////////////////

(in-class quiz)


////////////////////////////

New idea: demonstrate conclusion follows from premises using
*natural deduction*

--> use a minimal set of deduction rules

--> for each logical operator
    - *introduction* rule:
        lets us introduce a claim with that operator

    - *elimination* rule:
        lets us extract pieces from a claim with
            that operator

--> apply these rules to create new claims that 
    logically follow



/////////////////////////////////

Want to prove a *sequent* of the form:

    premises ⊢ conclusion (Sequent)

where *premises* is a comma-separated list.





Same idea as truth tables.
 --> want to prove that anytime the premises are all true,
    then the conclusion is also true.


--> but we will show the conclusion logically follows using
a series of natural deduction rules instead of truth tables.


////////////////////////////

AND rules idea.

1) What if we wanted to INTRODUCE an AND operator, like:
      P ∧ Q


   --> in what situations do you think we could do that?





2) What if we already had an AND statement like  P ∧ Q.

    --> what new claims would make sense using that statement?




    --> what happened to the AND operator in both cases?



//////////////////////////

AND rule summaries.


AND introduction:

         P   Q
AndI : ---------
         P ∧ Q



--> How could we demonstrate this rule in a truth table?




///

AND elimination:

          P ∧ Q               P ∧ Q
AndE1 : ---------   AndE2 : ---------
          P                     Q



--> How could we demonstrate these rules in a truth table?



//////////////////////////////////

What if we knew:

    a ∨ ¬b

and also:

    c → d

What could we claim with AndI?
(a || !b) && (c -> d)




//////////////////////////////////

Natural deduction proof syntax.

(premises) ⊢ (conclusion)
Proof(
    1 (  claim          ) by Justification,
    2 (  claim          ) by Justification,
    ...
    10 (  conclusion    ) by Justification
)




claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (with line numbers to reference previous claims)



/////////////////////////////////

Justifications so far:

    Premise

    AndI(lhsNum, rhsNum)
left side, right side
(and introduction)

    AndE1(andNum)
left side check
(and elimination)

    AndE2(andNum)
right side check

--> what do these look like in programming?

--> what do you think they're actually doing?



////////////////////////////////

Example:

Given premises:  a ∧ b, c
Use natural deduction to prove: b ∧ c

(and1.sc)

/////////////////////////////////

Prove the following sequent (and2.sc)

p, q, r ⊢ r ∧ (q ∧ p)



////////////////////////////////

Prove the following sequent (and3.sc)

p ∧ q ∧ r ⊢ q


////////////////////////////////

Next time:

- OR rules in natural deduction
- Natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction