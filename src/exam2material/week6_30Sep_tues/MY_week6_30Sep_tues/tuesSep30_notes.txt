HW 4 due tonight

HW 5 will be posted after class

/////////////////////////

Today:

- Discuss HW 4 problems 6 and 7
- Proving theorems
- Soundness and completeness
- Begin sets

/////////////////////////

HW 4 problem 6

p → q   equivalent to   ¬p ∨ q


p → q  ⊢  ¬p ∨ q


¬p ∨ q   ⊢  p → q


/////////////////////////

HW 4 problem 7

¬(p → q)    equivalent to   p ∧ ¬q


¬(p → q)  ⊢  p ∧ ¬q


p ∧ ¬q   ⊢   ¬(p → q)



/////////////////////////

How do we approach proofs?

1. Write out all the premises
2. Extract all information from premises 
    And statement
    maybe implies
3. Look at what you are trying to prove (what do we look for in goal/conclusion?)

    ∧ - try to prove both side seperately

    ∨ - try to prove one side (OrI)
        If or statement in premise, then use OrE
    → - Open ImplyI subproof Assume if as true

    ¬(something) - Open NegI subproof. Goal contradiction

    trying to get a propositional atom? 
        find where it appears in a premise or claim. 
            Think about how you can extract it
        If nothing works use PbC

After each claim - 
    See if there's anything new to extract
    or anything new to conclude


Inside a subproof - 
    1. Your goal
    2. Your conclusion at the end of the subproof (OrE, NegI, ImplyI, PbC)


Doesn't fit a pattern or doesn't work out from above?




--> when do we open a subproof?





--> can we assume anything in a subproof? 
    Yes, but you can only end a subproof with one of the 4 rules


//////////////////////////////////

Bigger example: big.sc

//////////////////////////////////

A THEOREM in propositional logic is something that is
always true with no need for premises. For example:


Law of the excluded middle. (LEM)

p ∨ ¬p



What would a theorem be in a truth table?
    tautology



Prove LEM (lem.sc):

⊢ ( p ∨ ¬p )               //lem.sc



⊢ (theorem that you are trying to prove)

/////////////////////////////////

SOUNDNESS and COMPLETENESS of natural deduction in
    propositional logic

    "provable": prove using natural deduction
    "true": demonstrate an argument with truth tables


SOUNDNESS: everything that is provable is actually true

p ∧ q 
--------
p


COMPLETENESS: everything that is true is provable






--> what would it mean if a proof system was unsound?
Prove things that aren't true



--> what would it mean if a proof system was incomplete?
A true arguement that isn't unable to be proven with my proof system



Propositional logic is both SOUND and COMPLETE.



Using natural deduction to prove the sequent:
    P1, P2, ..., Pn ⊢ q


Is equivalent to using truth tables to show that whenever
    P1, P2, ..., Pn
are true, then q is also true

//////////////////////////////////////

(in-class quiz)

//////////////////////////////////////

Sets.

A set is an unordered collection of elements


{1,1,3,5,7} = {1,3,5,7} = {7,3,1,5}
//Duplicates don't matter


∈: is in, exists in

    x ∈ A: x exists in set A, x is in A

    x ∉ A: x does not exist in set A, x is not in A



Example: A = {1,4,7,11,20}

    1 ∈ A
    2 ∉ A



- Common sets in math:

    ℕ: natural (pos integers) numbers
        1, 2, 3, ...
    ℤ: All integers
        -1, 0, 1, ...
    ℚ: rational (p/q where p && q ∈ Z and q != 0)
    ℝ: real numbers (decimals)
    ℂ: Complex numbers
    ∅: empty set

ℕ ⊂ ℤ ⊂ ℚ ⊂ ℝ ⊂ ℂ
⊂ (Subset of...)
////////////////////////////////////

Set builder notation.

: means, where, such that
| means the same thing
: == |

{variable : conditions}


{x: x ∈ ℕ, 5 ≤ x ≤ 10}
{5, 6, 7, 8, 9, 10}


{k : k is a letter in "abracadabra"}
k = {a, b, r, c, d}



{x : x = 2k,  k ∈ ℕ}
{2, 4, 6, 8, 10, ...}



{n : n = k^2, k ∈ Z}
{0, 1, 4, 9, 16, 25, 36, 49, 64, ...}



{n : n = 3a + 1, a ∈ ℕ, 1 ≤ a ≤ 4}
{4, 7, 10, 13}


//////////////////////////////////////

Describe these sets in set builder notation


{5,10,15}



{CIS 115, CIS 200, CIS 300, CIS 301}



{2,4,8,16,32}


///////////////////////////////////////
∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

///////////////////////////////////////

Set union, ⋃

The union of the sets A and B, written A ⋃ B, is the set
of all elements....?


How could we express in set builder notation?

A ⋃ B =


//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

Set intersection, ⋂

The intersection of the sets A and B, written A ⋂ B, is the set
of all elements that are...?


How could we express in set builder notation?

A ⋂ B =

///////////////////////////////////////

Set difference,

/ or \ (means the same thing)

The difference between the sets A and B, written A - B, is the set
of all elements...?


How could we express in set builder notation?

A - B =

//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

A = {1,3,7,10,11,12}

B = {2,3,4,5,6,7}


Find:

A ⋃ B =

A ⋂ B =

A - B =

B - A =


//////////////////

Subset - A is a subset of B, written A ⊆ B, if
    all elements in A are also in B.

(We say A ⊂ B if A is a subset of B but A ≠ B.)




Example:

A = {1,3,4}

B = {1,3,5,8}

--> is A a subset of B?



A = {8,1,3}

B = {1,3,5,8}

--> is A a subset of B?



//////////////////////////////////

Next time:
- quantifiers
- proofs with sets
- limitations of propositional logic
- intro to predicate logic